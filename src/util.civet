export function replicate<A>(n: number, val: A): A[]
  let arr = new Array n
  arr.fill val
  arr

export last := <A>(xs: A[]) => xs.length === 0 ? null : xs[xs.length - 1]

export function countIf<A>(xs: A[], f: (x: A) => boolean): number
  res .= 0
  n := xs.length
  for i .= 0; i < n; i++
    if f xs[i]
      res++
  res

export function partition<A>(xs: A[], f: (x: A) => boolean): [A[], A[]]
  yes: A[] := []
  no: A[] := []
  n := xs.length
  for i .= 0; i < n; i++
    x := xs[i]
    if f x then yes.push x else no.push x
  [yes, no]

export sum := (xs: number[]) =>
  total .= 0
  n := xs.length
  for i .= 0; i < n; i++
    x := xs[i]
    total += x
  total

export function randomChoice<A>(arr: A[]): A | null
  arr[Math.random() * arr.length | 0] ?? null

export delay := (ms: number) => new Promise((resolve) => setTimeout resolve, ms)