import { invoke } from "@tauri-apps/api/core"
import { Component } from 'solid-js'
import { createStore, produce } from "solid-js/store"
import { Card, initGameState, cardEq, dealCards, draw, discard, discardPick, drawPick, claimKoikoi, turnPlayer, nextAction } from './model.civet'
import { delay } from './util.civet'
import Board from './components/Board.civet'

App: Component := =>
  let dialog!: HTMLDialogElement

  [state, setState] := createStore initGameState()

  test2 := =>
    setState produce (state) =>
      roundState := state.round_state
      card := roundState.stock.pop()!
      i := roundState.field_slot.findIndex (c) => c[0] + c[1] === 0 
      roundState.field_slot[i] = card

  test3 := =>
    setState produce (state) =>
      roundState := state.round_state
      card1 := roundState.hand[0][0]
      roundState.hand[0].splice(0, 1)
      card2 := roundState.field_slot[4]
      roundState.field_slot[4] = [0, 0]
      roundState.pile[0].push(card1)
      roundState.pile[0].push(card2)

  test4 := async =>
    setState produce (state) =>
      discard state.round_state, [5, 1]
    await delay 1500
    setState produce (state) =>
      discardPick state.round_state, null
    await delay 1500
    setState produce (state) =>
      draw state.round_state
    await delay 1500
    setState produce (state) =>
      drawPick state.round_state, null
    console.log "ouaf"
    await delay 1500
    setState produce (state) =>
      claimKoikoi state.round_state, null

  restart := =>
    setState produce (s) => dealCards s.round_state

  test := =>
    roundState := state.round_state
    show := roundState.show
    roundState2 := {...roundState, show: show === null ? [] : [show]}
    st := {...state, round_state: roundState2}
    invoke "test", {gameState: st}

  pickCard := async (card: Card) =>
    let rstate = state.round_state
    if turnPlayer(rstate) === 1 || !rstate.wait_action
      return
    switch rstate.state
      'Discard'
        if rstate.hand[0].some((c) => cardEq(c, card))
          setState produce (state) =>
            discard(state.round_state, card)
      "DiscardPick"
        if rstate.show && rstate.field_slot.some((c) => cardEq(c, card)) && rstate.show[0] === card[0]
          setState produce (state) =>
            discardPick(state.round_state, card)
      "DrawPick"
        if rstate.show && rstate.field_slot.some((c) => cardEq(c, card)) && rstate.show[0] === card[0]
          setState produce (state) =>
            drawPick(state.round_state, card)

    while !state.round_state.wait_action
      console.log state.round_state.state
      await delay 1500
      setState produce (state) =>
        nextAction state.round_state


  <div class="relative w-screen min-h-screen bg-main bg-cover bg-no-repeat flex flew-row items-center justify-around portrait:flex-col">
    <div class="absolute bg-white w-full h-full opacity-30 z-10 pointer-events-none" />
    <div class="flex flex-col bg-board b-cover p-6 border-2 border-black rounded-xl gap-4 z-20">
      <div class="text-4xl">Koï-Koï
      <button .btn onClick=test2>Test 2
      <button .btn onClick=test3>Test 3
      <button .btn onClick=restart>Recommencer
      <button .btn onClick=test4>Test: draw
      <button .btn>Crédits
    <Board
      hand1={state.round_state.hand[0]}
      hand2={state.round_state.hand[1]}
      field={state.round_state.field_slot}
      draw={state.round_state.stock}
      show={state.round_state.show}
      pile1={state.round_state.pile[0]}
      pile2={state.round_state.pile[1]}
      pickCard=pickCard
    />
    <button .btn onClick=test>Test
  <dialog .dialog ref={dialog}>

export default App