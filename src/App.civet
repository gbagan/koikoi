import { invoke } from "@tauri-apps/api/core"
import { Component, createMemo, createSignal } from 'solid-js'
import { createStore, produce } from "solid-js/store"
import { LIGHT, SEED, RIBBON, DROSS, SAKE,
        CardInfo, cardInter, sameMonth, initGameState, yaku, yakuPoints,
        pairingCards, YAKU_TEXT, YAKU_CARDS,
        turnPlayer } from './model.civet'
import { clearState, selectOyaCard, discard, discardPick, drawPick, claimKoikoi, nextAction, fakeDealCards, newRound as _newRound } from './actions.civet'
import { delay } from './util.civet'
import { aiPlays, randomAI } from './ai.civet'
import Board from './components/Board.civet'
import Info from './components/Info.civet'
import RoundOver from './components/RoundOver.civet'

App: Component := =>
  let dialog!: HTMLDialogElement

  [state, setState] := createStore initGameState()
  [hoveredCard, setHoveredCard] := createSignal<CardInfo | null>(null)

  newYakus := createMemo =>
    if state.phase != 'Yakus'
      null
    else
      player := turnPlayer state
      idx := state.newYakus[0]
      [YAKU_TEXT[idx], cardInter(YAKU_CARDS[idx], state.pile[player])] as [string, number[]]

  pairingHand := createMemo =>
    state.hand[0].filter (card) => pairingCards(state, card).length > 0 

  pileByFamily := createMemo =>
    p1 :=
      light: cardInter state.pile[0], LIGHT
      seed: cardInter state.pile[0], SEED
      ribbon: cardInter state.pile[0], RIBBON
      dross: cardInter(state.pile[0], DROSS).filter & !== SAKE
    p2 :=
      light: cardInter state.pile[1], LIGHT
      seed: cardInter state.pile[1], SEED
      ribbon: cardInter state.pile[1], RIBBON
      dross: cardInter(state.pile[1], DROSS).filter  & !== SAKE
    [p1, p2]

  test4 := async =>
    setState produce (state) =>
      clearState state
    continueGame()

  test := =>
    setState produce (state) =>
      fakeDealCards state
    show := state.show
    state2 := {...state, show: show === null ? [] : [show]}
    invoke "test", {gameState: state2}

  pickCard := async (card: number) =>
    if state.animation
      return
    if state.phase !== 'Oya2' && (turnPlayer(state) === 1 || !state.wait_action)
      return
    switch state.phase
      "Oya2"
        if state.oyaCards.includes(card)
          setState produce (state) =>
            selectOyaCard state, card
      "Discard"
        if state.hand[0].includes(card)
          setState produce (state) =>
            discard state, card
      "DiscardPick"
        if state.show !== null && state.fieldSlots.includes(card) && sameMonth(state.show, card)
          setState produce (state) =>
            discardPick state, card
      "DrawPick"
        console.log "drawPick", card
        if state.show !== null && state.fieldSlots.includes(card) && sameMonth(state.show, card)
          setState produce (state) =>
            drawPick state, card
    continueGame()

  acceptKoikoi := (choice: boolean) =>
    setState produce (state) =>
      claimKoikoi state, choice
    continueGame()

  newRound := =>
    setState produce (state) =>
      _newRound state
    continueGame()

  continueGame := async =>
    setState "animation", true
    loop
      await delay (state.phase === 'Yakus' ? 3000 : 1500)
      if state.phase === 'Oya2'
        setState "animation", false
        break
      if !state.wait_action
        setState produce (state) =>
          nextAction state
      else if turnPlayer(state) === 1
        setState produce (state) =>
          aiPlays state, randomAI
      else
        setState "animation", false
        break
    return

  <div class="relative w-screen min-h-screen bg-main bg-cover bg-no-repeat select-none flex flew-row items-center justify-around portrait:flex-col">
    <div class="absolute bg-white w-full h-full opacity-30 z-10 pointer-events-none" />
    <div class="flex flex-col bg-board b-cover p-6 border-2 border-black rounded-xl gap-4 z-20">
      <div class="text-4xl text-white">Koï-Koï
      <button .btn onClick=test>Test AI
      <button .btn onClick=test4>Nouvelle Partie
      <button .btn>Crédits
    {if state.phase === 'RoundOver' then
      <RoundOver
        yakus=yaku(state, turnPlayer(state))
        total=yakuPoints(state, turnPlayer(state))
        newRound=newRound
      />
    else   
      <Board
        phase={state.phase}
        hand1={state.hand[0]}
        hand2={state.hand[1]}
        field={state.fieldSlots}
        draw={state.stock}
        show={state.show}
        pile1={pileByFamily()[0]}
        pile2={pileByFamily()[1]}
        oyaCards={state.oyaCards}
        hoveredCard=hoveredCard()
        pairingHand={pairingHand()}
        pickCard=pickCard
        setHoveredCard=setHoveredCard
      />
    }
    <Info
      phase=state.phase
      turnPlayer=turnPlayer(state)
      winner=state.winner
      wait_action=state.wait_action
      hoveredCard=hoveredCard()
    >
    {newYakus() !== null &&
      <div class="absolute z-50 top-0 left-0 w-full h-full flex items-center">
        <div class="w-full bg-white bg-opacity-90 border-4 flex justify-center">
          <div>
            <div class="text-8xl">{newYakus()![0]}
            <div class="grid grid-cols-5">
              {newYakus()![1].map (card) =>
                <div
                  class="w-[10rem] h-[16rem] no-cover bg-no-repeat"
                  style={
                    "background-image": `url("../cards/${(card / 4 | 0) + 1}-${card % 4 + 1}.svg`
                  }
                />
              }
    }
    {state.phase === 'KoiKoi' && turnPlayer(state) === 0 &&
      <div class="absolute z-50 top-0 left-0 w-full h-full flex items-center">
        <div class="w-full bg-white bg-opacity-90 border-4 flex flex-col justify-center">
          <div .text-8xl>Acceptes-tu le Koï-Koï?
          <div .flex.justify-around>
            <button .large-btn onClick=[acceptKoikoi, true]>✅ Oui
            <button .large-btn onClick=[acceptKoikoi, false]>❌ Non
    }

    {state.phase === 'ShowKoiKoi' &&
      <div class="absolute z-50 top-0 left-0 w-full h-full flex items-center">
        <div class="w-full bg-white bg-opacity-90 border-4 flex justify-center">
            <div
              class="text-9xl"
              classList={
                'text-green-500': state.acceptsKoikoi
                'text-red-500': !state.acceptsKoikoi
              }  
            >Koï-Koï {state.acceptsKoikoi ? "accepté" : "refusé"}
    }

  <dialog .dialog ref={dialog}>

export default App