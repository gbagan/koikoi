import { invoke } from "@tauri-apps/api/core"
import { Component, createMemo } from 'solid-js'
import { createStore, produce } from "solid-js/store"
import { Card, cardInter, clearState, initGameState, cardEq, selectOyaCard, yaku, YAKU_TEXT, YAKU_CARDS
        dealCards, discard, discardPick, drawPick, turnPlayer, nextAction, fakeDealCards } from './model.civet'
import { delay } from './util.civet'
import { aiPlays, randomAI } from './ai.civet'
import Board from './components/Board.civet'
import Info from './components/Info.civet'

function yakuDifference(ys1: [number, number][], ys2: [number, number][])
  ys1.filter (y1) => ys2.every((y2) => y1[0] !== y2[0] || y1[1] !== y2[1])

App: Component := =>
  let dialog!: HTMLDialogElement

  [state, setState] := createStore initGameState()

  newYakus := createMemo =>
    rstate := state.round_state
    if rstate.state != 'Yakus'
      null
    else
      player := turnPlayer rstate
      diff := yakuDifference(yaku(rstate, player), rstate.turnYakus)
      [idx] := diff[0]
      [YAKU_TEXT[idx], cardInter(YAKU_CARDS[idx], rstate.pile[player])] as [string, Card[]]

  test3 := =>
    setState produce (state) =>
      roundState := state.round_state
      card1 := roundState.hand[0][0]
      roundState.hand[0].splice(0, 1)
      card2 := roundState.field_slot[4]
      roundState.field_slot[4] = [0, 0]
      roundState.pile[0].push(card1)
      roundState.pile[0].push(card2)

  test4 := async =>
    setState produce (state) =>
      clearState state.round_state
    continueGame()

  restart := =>
    setState produce (s) => dealCards s.round_state

  test := =>
    setState produce (state) =>
      fakeDealCards state.round_state
    roundState := state.round_state
    show := roundState.show
    roundState2 := {...roundState, show: show === null ? [] : [show]}
    st := {...state, round_state: roundState2}
    invoke "test", {gameState: st}

  pickCard := async (card: Card) =>
    let rstate = state.round_state
    if rstate.state !== 'Oya2' && (turnPlayer(rstate) === 1 || !rstate.wait_action)
      return
    switch rstate.state
      "Oya2"
        if rstate.oyaCards.some((c) => cardEq(c, card))
          setState produce (state) =>
            selectOyaCard(state.round_state, card)
      'Discard'
        if rstate.hand[0].some((c) => cardEq(c, card))
          setState produce (state) =>
            discard(state.round_state, card)
      "DiscardPick"
        if rstate.show && rstate.field_slot.some((c) => cardEq(c, card)) && rstate.show[0] === card[0]
          setState produce (state) =>
            discardPick(state.round_state, card)
      "DrawPick"
        if rstate.show && rstate.field_slot.some((c) => cardEq(c, card)) && rstate.show[0] === card[0]
          setState produce (state) =>
            drawPick(state.round_state, card)
    continueGame()

  continueGame := async =>
    loop
      await delay 1500
      if state.round_state.state === 'Oya2'
        break
      if !state.round_state.wait_action
        setState produce (state) =>
          nextAction state.round_state
      else if turnPlayer(state.round_state) === 1
        console.log 'continue', state.round_state.state
        setState produce (state) =>
          aiPlays(state.round_state, randomAI)
      else
        break
    return

  <div class="relative w-screen min-h-screen bg-main bg-cover bg-no-repeat flex flew-row items-center justify-around portrait:flex-col">
    <div class="absolute bg-white w-full h-full opacity-30 z-10 pointer-events-none" />
    <div class="flex flex-col bg-board b-cover p-6 border-2 border-black rounded-xl gap-4 z-20">
      <div class="text-4xl text-white">Koï-Koï
      <button .btn onClick=test>Test AI
      <button .btn onClick=test4>Nouvelle Partie
      <button .btn>Crédits
    <Board
      phase={state.round_state.state}
      hand1={state.round_state.hand[0]}
      hand2={state.round_state.hand[1]}
      field={state.round_state.field_slot}
      draw={state.round_state.stock}
      show={state.round_state.show}
      pile1={state.round_state.pile[0]}
      pile2={state.round_state.pile[1]}
      oyaCards={state.round_state.oyaCards}
      pickCard=pickCard
    />
    <Info
      state=state.round_state.state
      turnPlayer=turnPlayer(state.round_state)
      wait_action={state.round_state.wait_action}
    >
    {newYakus() !== null &&
      <div class="absolute z-50 top-0 left-0 w-full h-full flex items-center">
        <div class="w-full bg-white bg-opacity-90 border-4 flex justify-center">
          <div>
            <div class="text-8xl">{newYakus()![0]}
            <div class="grid grid-cols-5">
              {newYakus()![1].map (card) =>
                <div
                  class="w-[10rem] h-[16rem] no-cover bg-no-repeat"
                  style={
                    "background-image": `url("../cards/${card[0]}-${card[1]}.svg`
                  }
                />
              }
      }
  <dialog .dialog ref={dialog}>

export default App