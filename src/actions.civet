import { GameState, Phase, field, sameMonth, pairingCards, turnPlayer, turn8, yaku, yakuPoints,
        cardsToMultiHot, fieldCollected } from './model.civet'
import { countIf, last, replicate, shuffle } from './util.civet'

function yakuDifference(ys1: [number, number][], ys2: [number, number][])
  ys1.filter (y1) => ys2.every((y2) => y1[0] !== y2[0] || y1[1] !== y2[1])

properlyShuffle := =>
  loop
    cards: number[] := shuffle [0...48]
    hand1 := cards[0...8]
    hand2 := cards[8...16]
    field := cards[16...24]
    flag .= false
    for suit .= 0; suit < 12; suit++
      flag = flag || countIf(hand1, (c) => (c / 4 | 0) === suit) === 4
        || countIf(hand2, (c) => (c / 4 | 0) === suit) === 4
        || countIf(field, (c) => (c / 4 | 0) === suit) === 4
    if !flag
      return cards

export function clearState(state: GameState)
  state.hand = [[], []]
  state.pile = [[], []]
  state.stock = []
  state.init_board = []
  state.fieldSlots = []
  state.show = null
  state.oyaCards = []
  state.collected = []
  state.uncollected = []
  state.turn_16 = 1
  state.dealer = 0
  state.koikoi = [[0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0]]
  state.winner = null
  state.exhausted = false
  state.turnYakus = []
  state.newYakus = []
  state.turn_point = 0
  state.phase = "Oya"
  state.wait_action = false
  state.card_log = []
  state.stock = shuffle [0...48]
  return

export function dealCards(state: GameState)
  hand1 := state.stock[0...8].toSorted (a, b) => a - b
  hand2 := state.stock[8...16].toSorted (a, b) => a - b
  state.hand = [hand1, hand2]
  state.fieldSlots = state.stock[16...24] ++ replicate(8, null) as any
  state.stock = state.stock[24..]
  state.phase = 'Discard'
  state.wait_action = true
  state.init_board = [...field(state)]
  writeCardLog state, 'DealCards' // todo

export function fakeDealCards(state: GameState)
  clearState state
  cards: number[] .= [0...48]
  [c, ...cards2] := cards
  cards = cards2
  cards.push(c)
  hand1 := cards[0...8]
  //hand1.sort_unstable()
  hand2 := cards[8...16]
  //hand2.sort_unstable();
  state.hand = [hand1, hand2]
  state.fieldSlots = cards[16...24] ++ replicate(10, null) as any
  state.stock = cards[24..]
  state.dealer = 1
  state.pile = [[], []]
  state.phase = 'Discard'
  state.wait_action = true
  state.init_board = [...field(state)];
  writeCardLog state, 'DealCards'

DISCARDED_AND_PAIRED := 0
DISCARDED_AND_UNPAIRED := 1
PAIRED_WITH_DISCARD_COLLECTED := 2
PAIRED_WITH_DISCARD_UNCOLLECTED := 3
DRAWN_AND_PAIRED := 4
DRAWN_AND_UNPAIRED := 5
PAIRED_WITH_DRAW_COLLECTED := 6
PAIRED_WITH_DRAW_UNCOLLECTED := 7

writeCardLog := (state: GameState, phase: Phase) =>
  turn := state.turn_16 - 1
  switch phase
    'DealCards'
      state.card_log = [0...16].map () => [0...8].map () => {arr: replicate(48, 0)} 
    'Discard'
      if pairingCards(state, state.show!).length === 0
        state.card_log[turn][DISCARDED_AND_UNPAIRED] = {arr: cardsToMultiHot [state.show!] }
      else
        state.card_log[turn][DISCARDED_AND_PAIRED] = {arr: cardsToMultiHot [state.show!] }
    'DiscardPick'
      if state.collected.length > 0
        collected := cardsToMultiHot fieldCollected state
        uncollected := cardsToMultiHot state.uncollected
        state.card_log[turn][PAIRED_WITH_DISCARD_COLLECTED] = { arr: collected }
        state.card_log[turn][PAIRED_WITH_DISCARD_UNCOLLECTED] = { arr: uncollected }
    'Draw'
      if pairingCards(state, state.show!).length === 0
        state.card_log[turn][DRAWN_AND_UNPAIRED] = {arr: cardsToMultiHot [state.show!] }
      else
        state.card_log[turn][DRAWN_AND_PAIRED] = {arr: cardsToMultiHot [state.show!] }
    'DrawPick'
      if state.collected.length > 0
        collected := cardsToMultiHot fieldCollected state
        uncollected := cardsToMultiHot state.uncollected
        state.card_log[turn][PAIRED_WITH_DRAW_COLLECTED] = { arr: collected }
        state.card_log[turn][PAIRED_WITH_DRAW_UNCOLLECTED] = { arr: uncollected }

collectCards := (state: GameState, card: number | null) =>
  turn := turnPlayer(state)
  pairing := pairingCards state, state.show!
  n := pairing.length
  if n === 0
    state.collected = []
    state.uncollected = []
    index := state.fieldSlots.findIndex & === null
    if index >= 0
      state.fieldSlots[index] = state.show!
  else if n == 1 || n == 3
    state.collected = [state.show!] ++ pairing
    state.uncollected = []
    for pairedCard of pairing
      index := state.fieldSlots.findIndex (c) => c !== null && c === pairedCard
      state.fieldSlots[index] = null
    state.pile[turn] = state.pile[turn] ++ state.collected
  else
    state.collected = [state.show!, card!]
    state.uncollected = pairing.filter & !== card
    index := state.fieldSlots.indexOf card!
    if index >= 0
      state.fieldSlots[index] = null
    state.pile[turn] = state.pile[turn] ++ state.collected


export pickOyaCards := (state: GameState) =>
  c1 := state.stock.pop()
  c2 := state.stock.pop()
  state.oyaCards = [c1!, c2!]
  state.phase = "Oya2"

export selectOyaCard := (state: GameState, card: number) =>
  [c1, c2] := state.oyaCards
  c1Month := c1 / 4 | 0
  c2Month := c2 / 4 | 0
  cardMonth := card / 4 | 0
  if c1Month === c2Month
    state.phase = 'Oya3'
  else if cardMonth <= c1Month && cardMonth <= c2Month
    state.phase = 'Oya3'
    state.dealer = 0
  else
    state.phase = 'Oya3'
    state.dealer = 1

export oya3Phase := (state: GameState) =>
  [c1, c2] := state.oyaCards
  state.stock.push(c1)
  state.stock.push(c2)
  state.stock = properlyShuffle()
  state.oyaCards = []
  if sameMonth c1, c2
    state.phase = 'Init'
  else
    state.phase = 'DealCards'

export discard := (state: GameState, card: number) =>
  player := turnPlayer(state)
  state.turnYakus = yaku(state, player)
  state.turn_point = yakuPoints(state, player)
  state.show = card
  //ind := state.hand[player].findIndex &[0] === card[0] && &[1] === card[1]
  //state.show = state.hand[player].splice(ind, 1)
  //self.__write_log()
  state.phase = 'DiscardPick'
  state.wait_action = pairingCards(state, card).length === 2
  writeCardLog state, 'Discard'

export discardPick := (state: GameState, card: number | null) =>
  player := turnPlayer state
  if state.show !== null // todo: peut être réécrit avec un filter
    ind := state.hand[player].indexOf state.show
    state.hand[player].splice(ind, 1)
  collectCards state, card
  state.show = null
  state.phase = 'Draw'
  state.wait_action = false
  writeCardLog state, 'DiscardPick'

draw := (state: GameState) =>
  state.show = last(state.stock)!
  // state.show = [state.stock.pop()!] // todo
  state.phase = 'DrawPick'
  state.wait_action = pairingCards(state, state.show).length === 2
  writeCardLog state, 'Draw'

export drawPick := (state: GameState, card: number | null) =>
  state.stock.pop()
  collectCards state, card
  state.show = null
  player := turnPlayer(state)
  
  state.newYakus = yakuDifference yaku(state, player), state.turnYakus |> .map &[0]
  if state.newYakus.length > 0
    state.phase = 'Yakus'
    state.wait_action = false
  else
    state.turn_16 += 1
    state.phase = 'Discard'
    state.wait_action = true
  writeCardLog state, 'DrawPick'

nextYaku := (state: GameState) =>
  state.newYakus.splice(0, 1)
  if state.newYakus.length === 0
    state.phase = 'KoiKoi'
    state.wait_action = true

export claimKoikoi := (state: GameState, isKoikoi: boolean) =>
  state.acceptsKoikoi = isKoikoi
  state.wait_action = false
  state.phase = 'ShowKoiKoi'

afterKoikoi := (state: GameState) =>
  player := turnPlayer state
  t8 := turn8 state
  koikoi := state.acceptsKoikoi
  // if yakuPoints(state, player) > state.turn_point && t8 === 8
  //  isKoikoi = false
  state.koikoi[player][t8-1] = if koikoi then 1 else 0
  //self.__write_log(is_koikoi) todo

  if !koikoi
    state.phase = 'RoundOver'
    state.wait_action = true
    state.winner = player
  else if state.turn_16 == 16
    state.phase = 'RoundOver'
    state.wait_action = true
    state.exhausted = true
    state.winner = state.dealer
  else
    state.turn_16 += 1
    state.phase = 'Discard'
    state.wait_action = true

export newRound := (state: GameState) =>
  winner := state.winner

  if winner !== null
    p := yakuPoints(state, winner)
    if winner === 0
      state.points[0] += p
      state.points[1] -= p
    else
      state.points[0] -= p
      state.points[1] += p
  
  clearState state
  state.dealer = winner ?? 0 // todo

  state.stock = properlyShuffle()
  state.round += 1
  state.phase = 'DealCards'

export nextAction := (state: GameState) =>
  switch state.phase
    "Init"
      clearState state
      state.phase = "Oya"
    "DealCards"
      dealCards state
    "DiscardPick"
      discardPick state, null
    "Oya"
      pickOyaCards state
    "Oya3"
      oya3Phase state
    "Draw"
      draw state
    "DrawPick"  
      drawPick state, null
    "Yakus"
      nextYaku state
    "ShowKoiKoi"
      afterKoikoi state
    else {}