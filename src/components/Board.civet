import { Component, createMemo, Index } from "solid-js"
import { CardInfo, cardInfo, sameMonth, Phase } from "../model.civet"

type BoardComponent = Component<{
  phase: Phase
  hand1: number[]
  hand2: number[]
  field: (number | null)[]
  draw: number[]
  show: number | null
  pile1: Pile
  pile2: Pile
  oyaCards: number[]
  hoveredCard: CardInfo | null
  pairingHand: number[]
  setHoveredCard: (c: CardInfo | null) =>
  pickCard: (card: number) =>
}>

type Pile =
  light: number[]
  seed: number[]
  ribbon: number[]
  dross: number[]

cardTransform := (card: CardInfo, phase: Phase, show: boolean) =>
  translate := switch card.type
    when 'hand1'
      `translate(${10 + card.idx * 5}rem, 40rem)`
    when 'hand2'
      `translate(${10 + card.idx * 5}rem, 10rem)`
    when "field"
      `translate(${10 + (card.idx / 2 | 0) * 5}rem, ${21 + 8 * (card.idx % 2)}rem)`
    when "draw"
      "translate(3rem, 25rem)"
    when "pile1"
      `translate(${1.5 + card.idx * 2}rem, 46rem)`
    when "pile2"
      `translate(${1.5 + card.idx * 2}rem, 4rem)`
    when "oya"
      `translate(${15 + 20 * card.idx}rem, 25rem)`

  rotate := if phase === 'Oya2' || (card.type === 'draw' || card.type === 'hand2') && !show then "rotateY(180deg)" else "rotateY(0)"
  scale :=
    if card.type === 'pile1' || card.type === 'pile2'
    then "scale(0.166)"
    else if card.type === 'oya'
    then "scale(1)"
    else "scale(0.33)"
  `${translate} ${rotate} ${scale}`   

Board: BoardComponent := (props) =>
  isHoveredCard := (card: CardInfo) =>
    props.hoveredCard !== null && props.hoveredCard.card === card.card
  
  isGray := (card: CardInfo) =>
    switch card.type
      when 'hand1'
        !props.pairingHand.includes(card.card)
      when 'field'
        //if props.show &&  todo
        if props.show !== null
          return !sameMonth(card.card, props.show)

        if props.hoveredCard === null
          return false 
        props.hoveredCard.type === 'hand1' && !sameMonth(props.hoveredCard.card, card.card)
      else
        false

  cardZIndex := (card: CardInfo) =>
    switch card.type
      'draw'
        if card.card === props.show then 35 else 30
      'hand1' 40 + card.idx
      'hand2' 40 + card.idx
      'field' 50 + card.idx
      else 70

  pileCards := (n: 0 | 1) =>
    output: CardInfo[] := []
    pile := n === 0 ? props.pile1 : props.pile2
    idx .= 0
    for family of [pile.light, pile.seed, pile.ribbon, pile.dross]
      for card of family
        output.push cardInfo(card, n === 0 ? 'pile1' : 'pile2', idx)
        idx += 1
      idx += 1
    output

  allCards := createMemo =>
    hand1 := props.hand1.map (card, i) => cardInfo(card, 'hand1', i) as CardInfo
    hand2 := props.hand2.map (card, i) => cardInfo(card, 'hand2', i) as CardInfo
    field := props.field
      |> .map (card, i) => [i, card]
      |> .filter [, card] => card !== null      
      |> .map [i, card] => cardInfo(card as number, 'field', i as number) as CardInfo
    draw := props.draw.map (card) => cardInfo(card, 'draw', 0) as CardInfo
    pile1 := pileCards(0)
    pile2 := pileCards(1)
    oyaCards := props.oyaCards.map (card, i) => cardInfo(card, 'oya', i) as CardInfo
    //show := props.show.map (card, i) => cardInfo(card, 'show', i) as CardInfo
    cards := hand1 ++ hand2 ++ field ++ draw ++ pile1 ++ pile2 ++ oyaCards
    cards.sort((c1, c2) => c1.card - c2.card)
    cards

  <div class="z-20 h-[50vw] w-[50vw] bg-board bg-opacity-90 relative">
    {!['Init', 'Oya', 'Oya2', 'Oya3'].includes(props.phase) &&
      <>
        <div class="absolute text-white left-2 top-[37rem]">
          Lumières: {props.pile1.light.length}<br/>
          Animaux: {props.pile1.seed.length}<br/>
          Rubans: {props.pile1.ribbon.length}<br/>
          Plaines: {props.pile1.dross.length}
        <div class="absolute text-white left-2 top-[7rem]">
          Lumières: {props.pile2.light.length}<br/>
          Animaux: {props.pile2.seed.length}<br/>
          Rubans: {props.pile2.ribbon.length}<br/>
          Plaines: {props.pile2.dross.length}
    }
    <Index each={allCards()}>
      {(card) =>
        <div 
          class="absolute perspective-1000"
          style={
            width: card().type === 'hand1' && isHoveredCard(card()) ? '15rem' :  '12rem'
            height:  card().type === 'hand1' && isHoveredCard(card()) ? '24rem' : '19.5rem'
            'z-index': cardZIndex card()
          }
        >
          <div
            class="relative w-full h-full transition-transform duration-1000 preserve-3d"
            classList={"shadow-picked": card().type === 'hand1' && card().card === props.show}
            style={
              transform: cardTransform(card(), props.phase, card().card === props.show)
              top: "-50%"
              left: "-50%"
              filter: isGray(card()) ? "grayscale(100%)" : ""
            }
            onClick=[props.pickCard, card().card]
            onPointerEnter={[props.setHoveredCard, card()]}
            onPointerLeave={[props.setHoveredCard, null]}
        >
            <div
              class="absolute w-full h-full backface-hidden bg-no-cover"
              style={
                "background-image": `url("../cards/${(card().card / 4 | 0) + 1}-${card().card % 4 + 1}.svg`
              }
            />
            <div
              class="absolute w-full h-full backface-hidden bg-backface"
              classList={"animate-oya-card": props.phase === 'Oya2' && card() === props.hoveredCard}
              style={transform: "rotateY(180deg)"}  
            />
      }

export default Board