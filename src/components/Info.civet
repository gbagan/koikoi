import { Component, For, createMemo } from "solid-js"
import { Transition } from "solid-transition-group"
import { Phase, CardInfo, cardYakus } from "../model.civet"
import { intercalate } from "../util.civet"
import { Blue } from "./Emph.civet"

type Message = string | ["B", string]

const emph = (x: string) => ["B", x] as ["B", string]

type InfoComponent = Component<{
  phase: Phase
  turnPlayer: 0 | 1
  wait_action: boolean
  hoveredCard: CardInfo | null
}>

YAKU_NAME: Record<string, string> :=
  light: "Lumière"
  dross: "Plaine"
  ribbon: "Ruban"
  seed: "Animal"
  bdb: "Sanglier-Cerf-Papillon"
  fsake: "Contemplation de la fleur de cerisier"
  msake: "Contemplation de la lune"
  redblue: "Rubans à poésie rouges et bleus"
  red: "Rubans à poésie rouges"
  blue: "Rubans à poésie bleus"

const Info: InfoComponent = (props) =>  
  message := createMemo =>
    if props.hoveredCard !== null && ["hand1", "field", "pile1"].includes(props.hoveredCard.type)
    then
      yakus := cardYakus(props.hoveredCard.card)
      [yaku, amount] := yakus[0]
      name := YAKU_NAME[yaku]
      text: Message[] .= ["C'est une carte ", emph(name), ". Collectionne en ", emph(""+amount), " pour former un yaku."]
      if yakus.length > 1
        text ++ [" Tu peux également former "] ++ intercalate(yakus[1..].map(([yaku]) => emph(YAKU_NAME[yaku]) as Message), ", ")
      else
        text
    else if props.phase === 'Oya2'
    then ["Choisis une carte. Si elle est d'un mois plus petit que l'autre, tu commenceras la partie."]
    else if props.turnPlayer === 1 || !props.wait_action
    then null
    else if props.phase === 'Discard'
    then ["Choisis une carte de ta ", emph("main"), " pour l'associer à une carte de la ", emph("rivière"), '.']
    else if props.phase === 'DiscardPick'
    then ["Choisis une carte de la ", emph("riviète"), " pour l'associer à la carte que tu as précédemment chosie."]
    else if props.phase === 'DrawPick'
    then ["Choisis une carte de la ", emph("riviète"), " pour l'associer à la carte de la ", emph("pioche"), "."]    
    else null

  girlExpression := createMemo =>
    if props.turnPlayer === 1
    then "bg-thinking"
    else "bg-speaking"

  <div class=`z-20 relative w-[15rem] h-[25rem] bg-contain bg-no-repeat ${girlExpression()}`>
    <Transition
      onEnter={(el, done) =>
        a := el.animate [{ opacity: 0 }, { opacity: 1 }], {duration: 500}
        a.finished.then done
      }
      onExit={(el, done) =>
        a := el.animate [{ opacity: 1 }, { opacity: 0 }], {duration: 500}
        a.finished.then done
      }
    >
      {message() &&
        <div class="tooltip -right-5">
          <For each={message()}>
            {(m) =>
              switch m
                //["R", text] <Red>{text}
                //["G", text] <Green>{text}
                ["B", text] <Blue>{text}
                else m
            }
      }

export default Info